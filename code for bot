using System;
using System.Collections.Concurrent;
using System.Threading;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

class Program
{
    // –•—Ä–∞–Ω–∏–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (userId -> balance)
    private static ConcurrentDictionary<long, int> balances = new ConcurrentDictionary<long, int>();

    static async Task Main()
    {
        var botClient = new TelegramBotClient("–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"); // –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather

        using CancellationTokenSource cts = new CancellationTokenSource();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–ø–¥–µ–π—Ç–æ–≤
        var receiverOptions = new ReceiverOptions
        {
            AllowedUpdates = Array.Empty<UpdateType>() // –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–ø–¥–µ–π—Ç—ã
        };

        botClient.StartReceiving(
            HandleUpdateAsync,
            HandleErrorAsync,
            receiverOptions,
            cts.Token
        );

        var me = await botClient.GetMeAsync();
        Console.WriteLine($"–ë–æ—Ç @{me.Username} –∑–∞–ø—É—â–µ–Ω!");
        Console.ReadLine();

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        cts.Cancel();
    }

    static async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        if (update.Message is not { } message)
            return;

        if (message.Text is not { } messageText)
            return;

        var chatId = message.Chat.Id;

        if (messageText.StartsWith("/start"))
        {
            balances.TryAdd(chatId, 0);
            await botClient.SendTextMessageAsync(
                chatId,
                "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n" +
                "üí∞ /–¥–æ—Ö–æ–¥ —Å—É–º–º–∞ ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ\n" +
                "üí∏ /—Ä–∞—Å—Ö–æ–¥ —Å—É–º–º–∞ ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ\n" +
                "üìä /–±–∞–ª–∞–Ω—Å ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å",
                cancellationToken: cancellationToken);
        }
        else if (messageText.StartsWith("/–¥–æ—Ö–æ–¥"))
        {
            if (int.TryParse(messageText.Replace("/–¥–æ—Ö–æ–¥", "").Trim(), out int amount))
            {
                balances.AddOrUpdate(chatId, amount, (id, old) => old + amount);
                await botClient.SendTextMessageAsync(
                    chatId,
                    $"‚úÖ –î–æ—Ö–æ–¥ {amount} –¥–æ–±–∞–≤–ª–µ–Ω.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balances[chatId]}",
                    cancellationToken: cancellationToken);
            }
            else
            {
                await botClient.SendTextMessageAsync(chatId, "‚ùå –£–∫–∞–∂–∏ —Å—É–º–º—É: /–¥–æ—Ö–æ–¥ 1000", cancellationToken: cancellationToken);
            }
        }
        else if (messageText.StartsWith("/—Ä–∞—Å—Ö–æ–¥"))
        {
            if (int.TryParse(messageText.Replace("/—Ä–∞—Å—Ö–æ–¥", "").Trim(), out int amount))
            {
                balances.AddOrUpdate(chatId, -amount, (id, old) => old - amount);
                await botClient.SendTextMessageAsync(
                    chatId,
                    $"‚úÖ –†–∞—Å—Ö–æ–¥ {amount} –¥–æ–±–∞–≤–ª–µ–Ω.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balances[chatId]}",
                    cancellationToken: cancellationToken);
            }
            else
            {
                await botClient.SendTextMessageAsync(chatId, "‚ùå –£–∫–∞–∂–∏ —Å—É–º–º—É: /—Ä–∞—Å—Ö–æ–¥ 500", cancellationToken: cancellationToken);
            }
        }
        else if (messageText.StartsWith("/–±–∞–ª–∞–Ω—Å"))
        {
            balances.TryGetValue(chatId, out int balance);
            await botClient.SendTextMessageAsync(
                chatId,
                $"üìä –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}",
                cancellationToken: cancellationToken);
        }
    }

    static Task HandleErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
    {
        var errorMessage = exception switch
        {
            ApiRequestException apiRequestException
                => $"–û—à–∏–±–∫–∞ Telegram API:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
            _ => exception.ToString()
        };

        Console.WriteLine(errorMessage);
        return Task.CompletedTask;
    }
}

